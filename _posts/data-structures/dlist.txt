===================================
Descriptions of Doubly-Linked Lists
===================================

head ---> +---+-----+---+     +---+-----+---+     +---+-----+---+ 
          :   :     : o-|---> :   :     : o-:---> :   :     : o-:----> NULL
NULL <----:-o :     :   | <---:-o :     :   : <---:-o :     :   :
          +---+-----+---+     +---+-----+---+     +---+-----+---+ <--- tail
                           [Doubly-Linked Lists]



dlist_ins_next
==============

Following diagram describes the genenral case where the new_element is being
inserted into the middle of the list. When handling insertion into the head or
tail of the list, make sure to manage NULL, head, tail pointers accordingly.


[1]
                                  element
head ---> +---+-----+---+     +---+-----+---+     +---+-----+---+ 
          :   :     : o-|---> :   :     : o-:---> :   :     : o-:----> NULL
NULL <----:-o :     :   | <---:-o :     :   : <---:-o :     :   :
          +---+-----+---+     +---+-----+---+     +---+-----+---+ <--- tail
                                                   ^   
                                                   | 
  new_element->next = element->next;    +---+-----+|--+ 
                                        :   :     :o  :
                                        :   :     :   :
                                        +---+-----+---+
                                          new_element


[2]
                                  element
head ---> +---+-----+---+     +---+-----+---+     +---+-----+---+ 
          :   :     : o-|---> :   :     : o-:---> :   :     : o-:----> NULL
NULL <----:-o :     :   | <---:-o :     :   : <---:-o :     :   :
          +---+-----+---+     +---+-----+---+     +---+-----+---+ <--- tail
                                         ^         ^   
                                         |         | 
  new_element->prev = element;          +|--+-----+|--+ 
                                        :o  :     :o  :
                                        :   :     :   :
                                        +---+-----+---+
                                          new_element


[3]
                                  element
head ---> +---+-----+---+     +---+-----+---+     +---+-----+---+ 
          :   :     : o-|---> :   :     : o-:---> :   :     : o-:----> NULL
NULL <----:-o :     :   | <---:-o :     :   :     :  o:     :   :
          +---+-----+---+     +---+-----+---+     +--|+-----+---+ <--- tail
                                         ^         ^ | 
                                         |         | V
  element->next->prev = new_element;    +|--+-----+|--+ 
                                        :o  :     :o  :
                                        :   :     :   :
                                        +---+-----+---+
                                          new_element


[4]
                                  element
head ---> +---+-----+---+     +---+-----+---+     +---+-----+---+ 
          :   :     : o-|---> :   :     :   :     :   :     : o-:----> NULL
NULL <----:-o :     :   | <---:-o :     :  o:     :  o:     :   :
          +---+-----+---+     +---+-----+--|+     +--|+-----+---+ <--- tail
                                         ^ |       ^ | 
                                         | V       | V
  element->next = new_element;          +|--+-----+|--+ 
                                        :o  :     :o  :
                                        :   :     :   :
                                        +---+-----+---+
                                          new_element



dlist_remove
============

Following diagram describes the genenral case where the element in the middle
of the list is being removed. When handling removal of the head or tail
elements, make sure to manage NULL, head, tail pointers accordingly.

[!] Note: Upon return, 'data' points to the data stored in the element that was
removed. It is the responsibility of the caller to manage the storage
associated with the data.


[1]
                      +------------------------------+
                      |                              |
                      |           element            v
head ---> +---+-----+-|-+     +---+------+---+     +---+-----+---+ 
          :   :     : o |     :   :      : o-:---> :   :     : o-:----> NULL
NULL <----:-o :     :   | <---:-o :  ^   :   : <---:-o :     :   :
          +---+-----+---+     +---+--|---+---+     +---+-----+---+ <--- tail
                                     |
                                    data

  element->prev->next = element->next;


[2]
                      +------------------------------+
                      |                              |
                      |           element            v
head ---> +---+-----+-|-+     +---+------+---+     +---+-----+---+ 
          :   :     : o |     :   :      : o-:---> :   :     : o-:----> NULL
NULL <----:-o :     :   | <---:-o :  ^   :   :     : o :     :   :
          +---+-----+---+     +---+--|---+---+     +-|-+-----+---+ <--- tail
                      ^              |               |
                      |             data             |
                      +------------------------------+

  element->next->prev = element->prev;


[3]
                      +------------------------------+
                      |                              |
                      |                              v
head ---> +---+-----+-|-+                          +---+-----+---+ 
          :   :     : o |                          :   :     : o-:----> NULL
NULL <----:-o :     :   |            ^             : o :     :   :
          +---+-----+---+            |             +-|-+-----+---+ <--- tail
                      ^              |               |
                      |             data             |
                      +------------------------------+

  free(element); 
